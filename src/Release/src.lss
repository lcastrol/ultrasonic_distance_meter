
src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000078  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000010c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	17 d0       	rcall	.+46     	; 0x6a <main>
  3c:	1b c0       	rjmp	.+54     	; 0x74 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <ioinit>:
  40:	10 92 60 00 	sts	0x0060, r1
  44:	80 b7       	in	r24, 0x30	; 48
  46:	82 65       	ori	r24, 0x52	; 82
  48:	80 bf       	out	0x30, r24	; 48
  4a:	80 e3       	ldi	r24, 0x30	; 48
  4c:	86 bf       	out	0x36, r24	; 54
  4e:	8c bf       	out	0x3c, r24	; 60
  50:	d7 9a       	sbi	0x1a, 7	; 26
  52:	ba 9a       	sbi	0x17, 2	; 23
  54:	83 b7       	in	r24, 0x33	; 51
  56:	85 60       	ori	r24, 0x05	; 5
  58:	83 bf       	out	0x33, r24	; 51
  5a:	08 95       	ret

0000005c <get_next_state>:
  5c:	80 91 60 00 	lds	r24, 0x0060
  60:	82 30       	cpi	r24, 0x02	; 2
  62:	08 f4       	brcc	.+2      	; 0x66 <get_next_state+0xa>
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	08 95       	ret

00000068 <execute_state>:
  68:	08 95       	ret

0000006a <main>:
  6a:	ea df       	rcall	.-44     	; 0x40 <ioinit>
  6c:	f7 df       	rcall	.-18     	; 0x5c <get_next_state>
  6e:	80 93 60 00 	sts	0x0060, r24
  72:	fc cf       	rjmp	.-8      	; 0x6c <main+0x2>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>
