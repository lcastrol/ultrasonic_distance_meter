
smart_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000346  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  000003da  2**0
                  ALLOC
  3 .stab         00000828  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d57  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
   c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  14:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  18:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  1c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  20:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  24:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  2c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  30:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  34:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  38:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  3c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  40:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  44:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  48:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  4c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_20>
  54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  58:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  5c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  60:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  68:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  6c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  70:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  7c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  80:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  84:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  8c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  90:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  94:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  98:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  9c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  a8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  ac:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  b0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  b4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  b8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  bc:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  c0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  c4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  c8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  cc:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  d0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  d4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  d8:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  dc:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>
  e0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__bad_interrupt>

000000e4 <__trampolines_start>:
  e4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <calculate_function>
  e8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <idle_function>
  ec:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <listen_function>
  f0:	0c 94 3d 01 	jmp	0x27a	; 0x27a <send_function>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d1 e2       	ldi	r29, 0x21	; 33
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_clear_bss>:
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
 10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
 10e:	a9 30       	cpi	r26, 0x09	; 9
 110:	b2 07       	cpc	r27, r18
 112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
 114:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
 118:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

0000011c <__bad_interrupt>:
 11c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000120 <ioinit>:
tx_condition_t tx_status;
command_st_t command_status;

void
ioinit (void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62

	/* Init state */
	current_state = IDLE;
 128:	10 92 00 02 	sts	0x0200, r1

	/* Init function pointers */
	state_function_ptr[IDLE] = &idle_function;
 12c:	8c e5       	ldi	r24, 0x5C	; 92
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	90 93 02 02 	sts	0x0202, r25
 134:	80 93 01 02 	sts	0x0201, r24
	state_function_ptr[SEND] = &send_function;
 138:	8d e3       	ldi	r24, 0x3D	; 61
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	90 93 04 02 	sts	0x0204, r25
 140:	80 93 03 02 	sts	0x0203, r24
	state_function_ptr[LISTEN] = &listen_function;
 144:	83 e6       	ldi	r24, 0x63	; 99
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	90 93 06 02 	sts	0x0206, r25
 14c:	80 93 05 02 	sts	0x0205, r24
	state_function_ptr[CALCULATE] = &calculate_function;
 150:	8a e6       	ldi	r24, 0x6A	; 106
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	90 93 08 02 	sts	0x0208, r25
 158:	80 93 07 02 	sts	0x0207, r24

    /* Timer 0 is 8-bit PWM */
	/* Timer 0 is used to generate the 40 KHz pulses in OC0A and OC0B */
	TCCR0A |= _BV(COM0A0) |_BV(COM0B0) | _BV(WGM01) ; /* CTC, and toggle OC0A on Compare Match */
 15c:	84 e4       	ldi	r24, 0x44	; 68
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	24 e4       	ldi	r18, 0x44	; 68
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	22 65       	ori	r18, 0x52	; 82
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18

	TIMSK0 = 1;
 16e:	8e e6       	ldi	r24, 0x6E	; 110
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
	TCCR0B |= _BV(WGM02);
 178:	85 e4       	ldi	r24, 0x45	; 69
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	25 e4       	ldi	r18, 0x45	; 69
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	28 60       	ori	r18, 0x08	; 8
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
	OCR0A = 0x30; /* 25 decnote [1] */
 18a:	87 e4       	ldi	r24, 0x47	; 71
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	20 e3       	ldi	r18, 0x30	; 48
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
	OCR0B = 0x30; /* 25 dec note [1] */
 194:	88 e4       	ldi	r24, 0x48	; 72
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	20 e3       	ldi	r18, 0x30	; 48
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18

    /* Enable OC0A and OC0B as outputs. */
    DDRA_OC0B |= _BV(OC0B);
 19e:	81 e2       	ldi	r24, 0x21	; 33
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	21 e2       	ldi	r18, 0x21	; 33
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	20 68       	ori	r18, 0x80	; 128
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
    DDRB_OC0A |= _BV(OC0A);
 1b0:	84 e2       	ldi	r24, 0x24	; 36
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	24 e2       	ldi	r18, 0x24	; 36
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	24 60       	ori	r18, 0x04	; 4
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
    //DDROC = _BV (OC1);

    /* Enable timer 1 overflow interrupt. */
    //TIMSK = _BV (TOIE1);
    //sei ();
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <get_next_state>:

uint8_t
get_next_state(void){
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t nstate;

	switch(current_state){
 1d2:	80 91 00 02 	lds	r24, 0x0200
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	79 f0       	breq	.+30     	; 0x1fe <get_next_state+0x36>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	91 05       	cpc	r25, r1
 1e4:	1c f4       	brge	.+6      	; 0x1ec <get_next_state+0x24>
 1e6:	89 2b       	or	r24, r25
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <get_next_state+0x30>
 1ea:	2a c0       	rjmp	.+84     	; 0x240 <get_next_state+0x78>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	91 05       	cpc	r25, r1
 1f0:	89 f0       	breq	.+34     	; 0x214 <get_next_state+0x4c>
 1f2:	03 97       	sbiw	r24, 0x03	; 3
 1f4:	09 f1       	breq	.+66     	; 0x238 <get_next_state+0x70>
 1f6:	24 c0       	rjmp	.+72     	; 0x240 <get_next_state+0x78>
		case IDLE:
			nstate = SEND;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	89 83       	std	Y+1, r24	; 0x01
			break;
 1fc:	25 c0       	rjmp	.+74     	; 0x248 <get_next_state+0x80>
		case SEND:
			if (tx_status == ON){
 1fe:	80 91 08 02 	lds	r24, 0x0208
 202:	88 23       	and	r24, r24
 204:	19 f4       	brne	.+6      	; 0x20c <get_next_state+0x44>
				nstate = LISTEN;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	89 83       	std	Y+1, r24	; 0x01
			} else {
				nstate = current_state;
			}
			break;
 20a:	1e c0       	rjmp	.+60     	; 0x248 <get_next_state+0x80>
			break;
		case SEND:
			if (tx_status == ON){
				nstate = LISTEN;
			} else {
				nstate = current_state;
 20c:	80 91 00 02 	lds	r24, 0x0200
 210:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 212:	1a c0       	rjmp	.+52     	; 0x248 <get_next_state+0x80>
		case LISTEN:
			if (command_status == RECEIVED){
 214:	80 91 07 02 	lds	r24, 0x0207
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	19 f4       	brne	.+6      	; 0x222 <get_next_state+0x5a>
				nstate = CALCULATE;
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	89 83       	std	Y+1, r24	; 0x01
 220:	0a c0       	rjmp	.+20     	; 0x236 <get_next_state+0x6e>
			} else if (command_status == WAITING){
 222:	80 91 07 02 	lds	r24, 0x0207
 226:	88 23       	and	r24, r24
 228:	11 f4       	brne	.+4      	; 0x22e <get_next_state+0x66>
				nstate = IDLE;
 22a:	19 82       	std	Y+1, r1	; 0x01
 22c:	04 c0       	rjmp	.+8      	; 0x236 <get_next_state+0x6e>
			} else {
				nstate = current_state;
 22e:	80 91 00 02 	lds	r24, 0x0200
 232:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 234:	09 c0       	rjmp	.+18     	; 0x248 <get_next_state+0x80>
 236:	08 c0       	rjmp	.+16     	; 0x248 <get_next_state+0x80>
		case CALCULATE:
			if (0){
				nstate = SEND;
			} else {
				nstate = current_state;
 238:	80 91 00 02 	lds	r24, 0x0200
 23c:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 23e:	04 c0       	rjmp	.+8      	; 0x248 <get_next_state+0x80>
		default:
			nstate = current_state;
 240:	80 91 00 02 	lds	r24, 0x0200
 244:	89 83       	std	Y+1, r24	; 0x01
			break;
 246:	00 00       	nop
	}


	return nstate;
 248:	89 81       	ldd	r24, Y+1	; 0x01
}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <execute_state>:

void
execute_state(void){
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62

	(* state_function_ptr[current_state]) ();
 25a:	80 91 00 02 	lds	r24, 0x0200
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	9d 4f       	sbci	r25, 0xFD	; 253
 26a:	fc 01       	movw	r30, r24
 26c:	80 81       	ld	r24, Z
 26e:	91 81       	ldd	r25, Z+1	; 0x01
 270:	fc 01       	movw	r30, r24
 272:	19 95       	eicall
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <send_function>:


void send_function(void){
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62

    //Timer on
    TCCR0B |=  _BV(CS02) | _BV(CS00); /* Set the prescale to 8, note [1] */
 282:	85 e4       	ldi	r24, 0x45	; 69
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	25 e4       	ldi	r18, 0x45	; 69
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	20 81       	ld	r18, Z
 28e:	25 60       	ori	r18, 0x05	; 5
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
    tx_status = ON;
 294:	10 92 08 02 	sts	0x0208, r1
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <main>:


int
main (void)
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
    ioinit ();
 2a6:	0e 94 90 00 	call	0x120	; 0x120 <ioinit>
    /* loop forever, the interrupts are doing the rest */
    while(1)
    {
    	current_state = get_next_state();
 2aa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <get_next_state>
 2ae:	80 93 00 02 	sts	0x0200, r24
    	execute_state();
 2b2:	0e 94 29 01 	call	0x252	; 0x252 <execute_state>
    }
 2b6:	f9 cf       	rjmp	.-14     	; 0x2aa <main+0xc>

000002b8 <idle_function>:
       //sleep_mode();
    return (0);
}

void idle_function(void){
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62

}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <listen_function>:



void listen_function(void){
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62

}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <calculate_function>:

void calculate_function(void){
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62

}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <__vector_20>:


ISR (TIMER1_OVF_vect)       /* Note [2] */
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	00 90 5f 00 	lds	r0, 0x005F
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	00 90 5b 00 	lds	r0, 0x005B
 2f2:	0f 92       	push	r0
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
	//Timer on
	TCCR0B &=  ~(_BV(CS02) | _BV(CS01) | _BV(CS00));
 308:	85 e4       	ldi	r24, 0x45	; 69
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	25 e4       	ldi	r18, 0x45	; 69
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	28 7f       	andi	r18, 0xF8	; 248
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
	tx_status = OFF;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 08 02 	sts	0x0208, r24
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	00 92 5b 00 	sts	0x005B, r0
 336:	0f 90       	pop	r0
 338:	00 92 5f 00 	sts	0x005F, r0
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
