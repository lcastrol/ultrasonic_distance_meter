
analog_comp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .stab         000005ac  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b8b  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_23>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_comp>:
#include <util/setbaud.h>

char alarm = 0;

void init_comp()
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
    // Disable the digital input buffers.
    DIDR1 = (1<<AIN1D) | (1<<AIN0D);
  98:	8f e7       	ldi	r24, 0x7F	; 127
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	23 e0       	ldi	r18, 0x03	; 3
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18

    // Setup the comparator...
    // Enabled, no bandgap, interrupt enabled,
    // no input capture, interrupt on falling edge.
    ACSR = (1<<ACD) | (0<<ACBG) | (1<<ACIE) | (0<<ACIC) | (1<<ACIS1) | (0<<ACIS0);
  a2:	80 e5       	ldi	r24, 0x50	; 80
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	2a e8       	ldi	r18, 0x8A	; 138
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18

    sei();
  ac:	78 94       	sei
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <main>:

int main()
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
    init_comp();
  bc:	0e 94 48 00 	call	0x90	; 0x90 <init_comp>

    while (1)
    {
        if (alarm)
  c0:	80 91 00 01 	lds	r24, 0x0100
  c4:	88 23       	and	r24, r24
  c6:	21 f0       	breq	.+8      	; 0xd0 <main+0x1c>
        {
        	uart_putchar('a');
  c8:	81 e6       	ldi	r24, 0x61	; 97
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 aa 00 	call	0x154	; 0x154 <uart_putchar>
        	// Do something important.
        }
    }
  d0:	f7 cf       	rjmp	.-18     	; 0xc0 <main+0xc>

000000d2 <__vector_23>:
}

ISR(ANALOG_COMP_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	00 90 5f 00 	lds	r0, 0x005F
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
    // Did it just go high?
    if (ACSR & ACO)
  f2:	80 e5       	ldi	r24, 0x50	; 80
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	80 81       	ld	r24, Z
  fa:	88 2f       	mov	r24, r24
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	85 70       	andi	r24, 0x05	; 5
 100:	99 27       	eor	r25, r25
 102:	89 2b       	or	r24, r25
 104:	69 f0       	breq	.+26     	; 0x120 <__vector_23+0x4e>
    {
        // Indicate a problem.
        alarm = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 00 01 	sts	0x0100, r24

        // Change to falling edge.
        ACSR &= ~(1<<ACIS0);
 10c:	80 e5       	ldi	r24, 0x50	; 80
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	20 e5       	ldi	r18, 0x50	; 80
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	2e 7f       	andi	r18, 0xFE	; 254
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
 11e:	0c c0       	rjmp	.+24     	; 0x138 <__vector_23+0x66>
    }
    else
    {
        // Indicate a all is well.
        alarm = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 00 01 	sts	0x0100, r24

        // Set up the rising edge.
        ACSR |= (1<<ACIS0);
 126:	80 e5       	ldi	r24, 0x50	; 80
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	20 e5       	ldi	r18, 0x50	; 80
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	21 60       	ori	r18, 0x01	; 1
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
    }
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	00 92 5f 00 	sts	0x005F, r0
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <uart_putchar>:

void uart_putchar(char c) {
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	89 83       	std	Y+1, r24	; 0x01

	//UDR0 = c;
    //loop_until_bit_is_set(UCSR0A, TXC0); /* Wait until transmission ready. */
	loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	80 81       	ld	r24, Z
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	80 72       	andi	r24, 0x20	; 32
 16e:	99 27       	eor	r25, r25
 170:	89 2b       	or	r24, r25
 172:	b1 f3       	breq	.-20     	; 0x160 <uart_putchar+0xc>
	UDR0 = c;
 174:	86 ec       	ldi	r24, 0xC6	; 198
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
}
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
